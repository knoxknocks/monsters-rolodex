{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","console","log","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","state","searchField","fetch","then","response","json","users","setState","this","filteredMonsters","filter","toLowerCase","includes","e","target","value","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iSAGaA,G,YAAO,SAAAC,GAAK,OAEjB,sBAAKC,UAAU,iBAAf,UACI,qBAAKC,IAAI,UAAUC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BACtB,6BAAKL,EAAMI,QAAQE,OACnB,4BAAIN,EAAMI,QAAQG,aCJjBC,EAAW,SAACR,GAErB,OADAS,QAAQC,IAAIV,GACJ,qBAAKC,UAAU,YAAf,SAGED,EAAMW,SAASC,KAAI,SAAAR,GAAO,OAC1B,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,UCPpBQ,G,YAAY,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,aAAhB,OAErB,uBAAOC,KAAK,SAASF,YAAcA,EAAaG,SAAUF,MCyC/CG,E,kDAxCX,aAAc,IAAD,8BACT,gBACKC,MAAQ,CACTR,SAAU,GACVS,YAAa,IAJR,E,gEAWO,IAAD,OACjBC,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKC,SAAU,CAACf,SAAUc,S,+BAIlC,IAAD,SAC4BE,KAAKR,MAA/BR,EADF,EACEA,SAAUS,EADZ,EACYA,YACZQ,EAAmBjB,EAASkB,QAAO,SAAAzB,GAAO,OAAEA,EAAQE,KAAKwB,cAAcC,SAASX,EAAYU,kBAElG,OACE,sBAAK7B,UAAU,MAAf,UAEE,kDAEA,cAAC,EAAD,CACEa,YAAY,kBAAkBC,aAAe,SAAAiB,GAAC,OAAI,EAAKN,SAAS,CAACN,YAAaY,EAAEC,OAAOC,WAGzF,cAAC,EAAD,CAAUvB,SAAUiB,W,GAhCZO,aCOHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBhB,MAAK,YAAkD,IAA/CiB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.87882eba.chunk.js","sourcesContent":["import React from 'react';\nimport './card.styles.css';\n\nexport const Card = props =>(\n\n        <div className='card-container'>\n            <img alt=\"monster\" src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`} /> \n            <h2>{props.monster.name}</h2>\n            <p>{props.monster.email}</p>\n\n        </div>\n)","import React from 'react';\nimport './card-list.styles.css';\nimport { Card } from '../card/card.component';\n\nexport const CardList = (props) => {\n    console.log(props);\n    return (<div className='card-list'>\n\n\n            { props.monsters.map(monster => (\n              <Card key={monster.id} monster={monster} />\n          ))}\n        \n        \n        </div>);\n}","import React from 'react';\nimport './search-box.styles.css';\n\nexport const SearchBox = ({ placeholder, handleChange} ) => (\n\n    <input type='search' placeholder={ placeholder} onChange={handleChange}  />\n\n\n)","import React, {Component} from 'react';\nimport {CardList} from './components/card-list/card-list.component';\nimport './App.css';\nimport {SearchBox} from './components/search-box/search-box.component';\n\nclass App extends Component {\n    constructor(){\n        super();\n        this.state = {\n            monsters: [],\n            searchField: ''\n            \n\n        };\n      \n    }\n\n    componentDidMount(){\n      fetch('https://jsonplaceholder.typicode.com/users')\n      .then(response => response.json())\n      .then(users => this.setState( {monsters: users}))\n     \n    }\n\n    render(){\n      const { monsters, searchField } = this.state;\n      const filteredMonsters = monsters.filter(monster=>monster.name.toLowerCase().includes(searchField.toLowerCase()))\n\n      return (\n        <div className=\"App\">\n          \n          <h1>Monsters Rolodex</h1>\n\n          <SearchBox\n            placeholder='search monsters' handleChange={ e => this.setState({searchField: e.target.value} )}\n          />\n          \n          <CardList monsters={filteredMonsters} />\n\n        </div>\n      );\n\n    }\n}\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}